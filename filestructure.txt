file structure of program

or like... the scores thing

so the scores... so
they're calculated

and then once they're calculated
like you have for each comparison ligand, for each protein, there is a score
now you have calculated each ligand to each protein
so now for each of those scores you get to each protein, you need to calculate the distance or 
whatever to like that of each comparison ligand



...

.
.
.


...


.



for each 



...


# for each ligand: 
#   for each protein:
#       get score for that ligand to that protein (score 1)
#       for each comparison ligand:
#           score for comparison ligand to current protein is already saved (score 2)
#           calculate the distance between the two scores (score 1 and score 2)
#           if the distance is not zero:
#           if the distance is not negative:
#               if the distance is not positive:
#                   if the distance is not infinite:
#           if the distance is not NaN:
#           if the distance is not undefined:
#           if the distance is not null:
#           if the distance is not empty:
#           if the distance is not blank:
#           if the distance is not whitespace:
#           if the distance is not a string:
#           if the distance is not a list:
#           if the distance is not a tuple:
#           if the distance is not a dictionary:
#           if the distance is not a set:
#           if the distance is not a frozenset:
#           if the distance is not a bytearray:
#           if the distance is not a bytes:
#           if the distance is not a memoryview:
#           if the distance is not a complex:
#           if the distance is not a decimal:
#           if the distance is not a fraction:
#           if the distance is not a range:
#           if the distance is not a slice:
#           if the distance is not a generator:
#           if the distance is not an iterator:
#           if the distance is not an iterable:
#           if the distance is not an async iterable:
#           if the distance is not an async iterator:
#           if the distance is not an async generator:
#           if the distance is not an async function:
#           if the distance is not an async method:
#           if the distance is not an async context manager:
#           if the distance is not an async with statement:
#           if the distance is not an async for statement:
#           if the distance is not an async for loop:
#           if the distance is not an async for comprehension:
#           if the distance is not an async for generator:
#           if the distance is not an async for iterator:
#           if the distance is not an async for iterable:
#           if the distance is not an async for async iterable:
#           if the distance is not an async for async iterator:
#           if the distance is not an async for async generator:
#           if the distance is not an async for async function:
#           if the distance is not an async for async method:
#           if the distance is not an async for async context manager:
#           if the distance is not an async for async with statement:
#           if the distance is not an async for async for statement:
#           if the distance is not an async for async for loop:
#           if the distance is not an async for async for comprehension:
#           if the distance is not an async for async for generator:
#           if the distance is not an async for async for iterator:
#           if the distance is not an async for async for iterable:
#           then:
#           calculate the distance between the two scores (score 1 and score 2)
#           if the distance is not zero:













# scores:
# i want... each time a score is calculated, i want to store it in a file called scores_<protein_name>.txt
# and i want to store the scores in the format <score> <ligand_name> on each line
# i want to store the scores in a directory called scores in the results directory
# and i want to create the directory if it doesn't exist
# i want to have the score inserted into the scores file such that it is sorted in ascending order
# i want to have the scores file be created if it doesn't exist

# later i want the the scores to be like... sorted according to their distance to each of the comparison ligands

# and i want to have the scores compared to the comparison ligands be in a file called best_ligands.txt in the results directory
# and i want to have the best ligands be sorted according to their distance to each of the comparison ligands
# and i want to have the best ligands be in the format <score> <ligand_name> on each line
# and i want to have the best ligands be sorted in ascending order



# for each ligand, i want the root mean square of all of the distances it has to the comparison 
# ligand for each protein to be the thing that it is sorted by in the comparison ligand's sorted score file.
# and i want to have the best ligands be in the format <score> <ligand_name> on each line
# and i want to have the best ligands be sorted in ascending order

# to complete this, i must modify the calculate_best_ligands function to calculate the root mean square of all of the distances
# for each ligand to the comparison ligands for each protein and store that in the best_ligands.txt file

# i also must modify the calculate_rms_relative_to_comparison function to calculate the root mean square of all of the distances
# for each ligand to the comparison ligands for each protein and store that in the best_ligands.txt file



# file structure of program

# or like... the scores thing

# so the scores... so
# they're calculated

# and then once they're calculated
# like you have for each comparison ligand, for each protein, there is a score
# now you have calculated each ligand to each protein
# so now for each of those scores you get to each protein, you need to calculate the distance or 
# whatever to like that of each comparison ligand



# process:::::::::

# Comparison Ligands protien scores per ligand:
# for each comparison ligand:
#   for each protein:
#       get score for that comparison ligand to that protein
#       save the score in directory dock/results/scores/comparison_ligands in file scores_<comparison_ligand_name>.txt
#       save the score in the format <score> <protein_name> on each line

# Ligands protien scores per ligand:
# for each ligand: 
#   for each protein:
#       get score for that ligand to that protein (score 1)
#       for each comparison ligand with current protein:
#           CompLigand[i]Protein[j] store comparisonLigandScore-ligandScore
#           
#           
#           score for comparison ligand to current protein is already saved (score 2)
#           calculate the distance between the two scores (score 1 and score 2)
#           store the distance in a list for that comparison ligand
#           
#           store the scores in a list for that ligand
#           store this score in a file called scores_<ligand_name>.txt in the dock/results/scores/ligands directory
#           store the score in the format <score> <protein_name> on each line


# for each ligand:
#   fetch the ligand 
#   for each comparison ligand:
#       
#       calculate the root mean square of the distances for each protein
#       have that be the value that it is sorted by in the best_ligands.txt file













# ok no more autocomplete with AI, that's very distracting

# desired results:
# see how good a ligand is as a substitute for a comparison ligand
# that is known by the root mean square of ligandScore-comparisonLigandScore for all proteins
# so, calculate that with each ligand-comparisonLigand pair, and generate a scoreboard or whatever for each substitute ligand,
# to find which ligands best work as substitutes for each comparisonLigand
# also generate a unique scoreboard for each comparisonLigand-protein pair, 
# such that it is shown which ligands are best as substitutes for a comparisonLigand for each individual protein, 
# because that might be useful as well


# so how will i do that?
# since there will likely be less comparisonLigands than proteins, i will have folders for each comparisonLigand
# that each contain all individual scores for each protein and the composite score using the RMS of the other files' data.
# Each file will store data as <score-comparisonScore> <protein_name> on each line, sorted by magnitude of <score-comparisonScore>,
# such that lower magnitudes are ranked as better, higher up in the list.

# I have it ordered score-comparisonScore, so that if score is lower than comparisonScore, then the resulting value is negative, showing
# that score is so much score below that of comparisonScore, and vice versa.

# The file names for the scores file will have a consistent structure:
# scores_<comparisonLigand_name>_<protein_name>.txt


# For the actual docked ligand files, there will exist a docked_ligands folder in the results folder.
# Inside of that folder, there will exist a subfolder for each docked ligand (yes, it could be hundreds or thousands of folders)
# that is named docked_<ligand_name>
# that will contain the .log and .pdbqt files for all proteins docked with that dedicated ligand.
# The folder should also contain a scores file that details the specific ligand's final ranking in each of the scores files,
# for each protein-comparisonLigand pair's score file and in each comparisonLigand_RMS score file.

# If the ligand is actually one of several models of a greater ligand file, then store each model as a subfolder of a folder with the 
# name of the overall as follows:
#docked_ligands
#   <ligand_name>
#       <ligand_name1>
#           ...
#       <ligand_name2>
#           ...
#       <ligand_name3>
#           ...
#       <ligand_name4>
#           ...
#       ...

# ex:
#docked_ligands
#   AAEAMN
#       AAEAMN_model01
#           ...
#       AAEAMN_model02
#           ...
#       AAEAMN_model03
#           ...
#       AAEAMN_model04
#           ...
#       AAEAMN_model05
#           ...
#       ...

# Make a similar system where like it makes a folder of folders whenever a model is encountered 
# that would otherwise get a dedicated folder for all other systems here as well

# also, have the program remove the weird .xaa thing and any other like extraneous file 
# extensions maybe when naming folders and final files i think



# <ligand#_name>_scores.txt should contain the following:
#<comparisonLigand1_name>:
#   RMS: <RMSOfScoresWithcomparisonLigand1> - #<rankOutOfTotalRMSWithcomparisonLigand1>
#   <protein1_name>: <score-comparison1ScoreWithProtein1> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand1AndProtein1>
#   <protein2_name>: <score-comparison1ScoreWithProtein2> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand1AndProtein2>
#   <protein3_name>: <score-comparison1ScoreWithProtein3> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand1AndProtein3>
#   <protein4_name>: <score-comparison1ScoreWithProtein4> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand1AndProtein4>
#   <protein5_name>: <score-comparison1ScoreWithProtein5> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand1AndProtein5>
#<comparisonLigand2_name>:
#   RMS: <RMSOfScoresWithcomparisonLigand2> - #<rankOutOfTotalRMSWithcomparisonLigand2>
#   <protein1_name>: <score-comparison2ScoreWithProtein1> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand2AndProtein1>
#   <protein2_name>: <score-comparison2ScoreWithProtein2> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand2AndProtein2>
#   <protein3_name>: <score-comparison2ScoreWithProtein3> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand2AndProtein3>
#   <protein4_name>: <score-comparison2ScoreWithProtein4> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand2AndProtein4>
#   <protein5_name>: <score-comparison2ScoreWithProtein5> - #<rankOfLigand#OutOfTotalScoresWithcomparisonLigand2AndProtein5>

#ex:
#ligand_abscisic_acid:
#   RMS: 2.3827
#   1stp: 2.4121 - #47/107
#   3k3k: -2.1353 - #41/107
#ligand_biotin:
#   RMS: 1.1415
#   1stp: 1.0114 - #47/107
#   3k3k: 1.1632 - #41/107


# So, the file structure will be as follows:
# dock
#   results
#       scores
#           scores_<comparisonLigand1_name>_RMS.txt
#           scores_<comparisonLigand2_name>_RMS.txt
#           scores_<comparisonLigand1_name>
#               scores_<comparisonLigand1_name>_in_<protein1_name>.txt
#               scores_<comparisonLigand1_name>_in_<protein2_name>.txt
#               scores_<comparisonLigand1_name>_in_<protein3_name>.txt
#               scores_<comparisonLigand1_name>_in_<protein4_name>.txt
#               scores_<comparisonLigand1_name>_in_<protein5_name>.txt
#           scores_<comparisonLigand2_name>
#               scores_<comparisonLigand2_name>_in_<protein1_name>.txt
#               scores_<comparisonLigand2_name>_in_<protein2_name>.txt
#               scores_<comparisonLigand2_name>_in_<protein3_name>.txt
#               scores_<comparisonLigand2_name>_in_<protein4_name>.txt
#               scores_<comparisonLigand2_name>_in_<protein5_name>.txt
#       docked_ligands
#           docked_<ligand1_name>
#               <ligand1_name>_scores.txt
#               <ligand1_name>_in_<protein1_name>.log
#               <ligand1_name>_in_<protein1_name>.pdbqt
#               <ligand1_name>_in_<protein2_name>.log
#               <ligand1_name>_in_<protein2_name>.pdbqt
#               <ligand1_name>_in_<protein3_name>.log
#               <ligand1_name>_in_<protein3_name>.pdbqt
#               <ligand1_name>_in_<protein4_name>.log
#               <ligand1_name>_in_<protein4_name>.pdbqt
#               <ligand1_name>_in_<protein5_name>.log
#               <ligand1_name>_in_<protein5_name>.pdbqt
#           docked_<ligand2_name>
#               <ligand2_name>_scores.txt
#               <ligand2_name>_in_<protein1_name>.log
#               <ligand2_name>_in_<protein1_name>.pdbqt
#               <ligand2_name>_in_<protein2_name>.log
#               <ligand2_name>_in_<protein2_name>.pdbqt
#               <ligand2_name>_in_<protein3_name>.log
#               <ligand2_name>_in_<protein3_name>.pdbqt
#               <ligand2_name>_in_<protein4_name>.log
#               <ligand2_name>_in_<protein4_name>.pdbqt
#               <ligand2_name>_in_<protein5_name>.log
#               <ligand2_name>_in_<protein5_name>.pdbqt
#           ...

# ex:
#dock
#   results
#       scores
#           scores_ligand_abscisic_acid_RMS.txt
#           scores_ligand_biotin_RMS.txt
#           scores_ligand_abscisic_acid
#               scores_ligand_abscisic_acid_in_1stp
#               scores_ligand_abscisic_acid_in_3k3k
#           scores_ligand_biotin
#               scores_ligand_biotin_in_1stp
#               scores_ligand_biotin_in_3k3k
#       docked_ligands
#           docked_biotin
#               biotin_scores.txt
#               biotin_in_1stp.log
#               biotin_in_1stp.pdbqt
#               biotin_in_3k3k.log
#               biotin_in_3k3k.pdbqt
#           docked_AAEAMN
#               docked_AAEAMN_model01
#                   AAEAMN_model01_scores.txt
#                   AAEAMN_model01_in_1stp.log
#                   AAEAMN_model01_in_1stp.pdbqt
#                   AAEAMN_model01_in_3k3k.log
#                   AAEAMN_model01_in_3k3k.pdbqt
#               docked_AAEAMN_model02
#                   AAEAMN_model02_scores.txt
#                   AAEAMN_model02_in_1stp.log
#                   AAEAMN_model02_in_1stp.pdbqt
#                   AAEAMN_model02_in_3k3k.log
#                   AAEAMN_model02_in_3k3k.pdbqt
#               docked_AAEAMN_model03
#                   AAEAMN_model03_scores.txt
#                   AAEAMN_model03_in_1stp.log
#                   AAEAMN_model03_in_1stp.pdbqt
#                   AAEAMN_model03_in_3k3k.log
#                   AAEAMN_model03_in_3k3k.pdbqt
#               docked_AAEAMN_model04
#                   AAEAMN_model04_scores.txt
#                   AAEAMN_model04_in_1stp.log
#                   AAEAMN_model04_in_1stp.pdbqt
#                   AAEAMN_model04_in_3k3k.log
#                   AAEAMN_model04_in_3k3k.pdbqt
#               docked_AAEAMN_model05
#                   AAEAMN_model05_scores.txt
#                   AAEAMN_model05_in_1stp.log
#                   AAEAMN_model05_in_1stp.pdbqt
#                   AAEAMN_model05_in_3k3k.log
#                   AAEAMN_model05_in_3k3k.pdbqt
#               


# Upon program completion, the top 5 ligands from each scores_<comparisonLigand#_name>_RMS.txt file will be displayed to the screen.


